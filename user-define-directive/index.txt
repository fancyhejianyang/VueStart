自定义指令
有些情况下需要dom操作，不得不使用自定义指令
使用方法：v-direName

钩子函数
指令定义函数提供几个函数：
bind：只调用一次，指令第一次绑定到元素时候调用，通常用作初始化的行为
inserted：绑定的元素插入父节点时候调用（父节点存在）
update：被绑定的元素所在的模板更新时候调用，不论绑定值是否变化。用过比较更新前后的绑定值可以忽略不必要的模板更新
componentUpdated：被绑定的元素所在的模板在完成一次更新周期时候调用
unbind：调用一次，指令与元素解绑调用
 钩子 函数的参数：el ,binding ,vnode,
oldValue

详细说明：
el：指令所绑定的元素，可以直接用来操作DOM
binding：一个对象，包含以下属性
 	name：指令名，不包括v-前缀
	value：指令的绑定值
	oldValue：指令绑定的前一个值仅在update和componentUpdated的钩子中使用
	expression：绑定值的字符串形式
	arg：传给指令的参数如v-my-directive：foo 参数arg = foo
	modifiers：一个带修饰符的对象，v-my-directive.foo.bar
修饰符对象值就是｛foo：true，bar：true｝
vnode：Vue编译生成的虚拟节点
oldVnode：上一个虚拟节点，仅在update和componentUpdated钩子中可用
除了el 参数，其他都应该只是只读的,钩子之间共享数据数据，通过元素的dataset进行
观察demo
directive-hookFun （` ` 不支持此种模板字符串语法）
函数简写
大多数情况下
，我们想在bind和update钩子上做重复动作，不关注其它钩子函数 的特殊写法
demo directive-simple
Vue.directive('directive-name',function(el ,binding){ // });
对象字面量
如果指令需要多个值，可以传入一个合法的js对象值
v-demo="{ color :' white' }"
